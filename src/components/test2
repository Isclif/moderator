import {React, useEffect, useState, useRef} from 'react';
import Header from './Header';
import ParticipantList from './ParticipantsList';
import Video from './Video';
import Footer from './Footer';
import ChatRoom from './ChatRoom';
import avatar1 from '../assets/avatar1.jpg'
import avatar2 from '../assets/avatar2.jpg'
import OtherUsers from './OtherUsers';
import {DoubleRightOutlined} from "@ant-design/icons";

import { XMarkIcon } from "@heroicons/react/16/solid";

import TestJanus from './TestJanus';




const Conference = () => {
  const [openChat, setOpenChat] = useState(false)
  const handleOpenChat = () => {
    setOpenChat(true)
    setOpenPartList(false)
    setOpenChatOnSmallSceens(true)
  }
  const [openPartList, setOpenPartList] = useState(false)
  const handleOpenPartList = () => {
    setOpenPartList(true)
    setOpenChat(false)
    setOpenChatOnSmallSceens(true)
  }

  const [openChatOnSmallSceens, setOpenChatOnSmallSceens] = useState(false)
  // const handleOpenChatOnSmallSceens = () => {
  //   setOpenChatOnSmallSceens(true)
  // }
  const handleDestroy = () => {
    setOpenChatOnSmallSceens(false)    
    setOpenChat(false)
    setOpenPartList(false)
  }

  const [sessionId, setSessionId] = useState({});
  const [sessionStarted, setSessionStarted] = useState(false);
  const [username, setUsername] = useState('');

  let sessionTest

  // const dataCreateSession = {
  //   janus: "create",
  //   transaction: "test creation de session with react"
  // };
  
  let dataPlugAudio = JSON.stringify({
    "janus": "attach",
    "plugin": "janus.plugin.audiobridge",
    "transaction": "attach plugin"
  });

  let bodyContent = JSON.stringify({
    "janus": "create",
    "transaction": "test creation de session"
  });

  let headersList = {
    "Content-Type": "application/json"
  }

  const createSession = async () => {
    try {
      // const response = await fetch('http://localhost:8088/janus', {
      //   method: 'POST',
      //   data: JSON.stringify(dataCreateSession),
      //   headers: {
      //     "Content-Type": "application/json",
      //   }
      // })
      let response = await fetch("http://localhost:8088/janus", { 
        method: "POST",
        body: bodyContent,
        headers: headersList
      });
      if (response.ok){
        const result = await response.json();
        // const sessionCreated = result.data.id;
        sessionTest = result.data.id;
        
        setSessionId(result.data);
        // debugger
        attachPlugToSession(sessionTest)
        console.log(sessionTest);
        // debugger
        console.log("info de la session crée: ", result.transaction);
      }
      // const result = await response.json();
    } catch (err){
      console.log('err')
    }
  }

  const attachPlugToSession = async (idSession) => {
    try {
      let response = await fetch(`http://localhost:8088/janus/${idSession}`, {
        method: "POST",
        body: dataPlugAudio, // Assurez-vous que dataPlugAudio est défini et converti en JSON
        headers: {
          "Content-Type": "application/json",
        }
      });
      // debugger
      if (response.ok) {
        const result = await response.json();
        console.log("Info du plugin rattaché: ", result.data);
  
        fetchData(result.session_id);
        // fetchData();
      } else {
        console.error("Erreur HTTP: ", response.status, response.statusText);
      }
    } catch (err) {
      console.error("Erreur lors de l'attachement du plug :", err);
    }
  }

  const fetchData = async (session_id) => {
    try {
      const response = await fetch(`http://localhost:8088/janus/${session_id + "?rid=" + new Date().getTime()}`);
      console.log(sessionId);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      if(response.ok)
        fetchData(sessionTest)
        console.log(sessionTest)
        // debugger
      const result = await response.json();
      console.log(result);
    } catch (err) {
      console.log("erreur", err);
    }
  };

  // useEffect(() => {
  //   const createSession = async () => {
  //     try {
  //       // const response = await fetch('http://localhost:8088/janus', {
  //       //   method: 'POST',
  //       //   data: JSON.stringify(dataCreateSession),
  //       //   headers: {
  //       //     "Content-Type": "application/json",
  //       //   }
  //       // })
  //       let response = await fetch("http://localhost:8088/janus", { 
  //         method: "POST",
  //         body: bodyContent,
  //         headers: headersList
  //       });
  //       if (response.ok){
  //         const result = await response.json();
  //         const sessionCreated = result.data.id;

  //         setSessionId(sessionCreated)
  //         // console.log(result.data.id);
  //         console.log("info de la session crée: ", result.transaction);
  //       }
  //       // const result = await response.json();
  //     } catch (err){
  //       console.log('err')
  //     }
  //   }

  //   // const attachPlugToSession = async (idSession) => {
  //   //   try {
  //   //     let response = await fetch(`http://localhost:8088/janus/${idSession}`, {
  //   //       method: "POST",
  //   //       body: dataPlugAudio, // Assurez-vous que dataPlugAudio est défini et converti en JSON
  //   //       headers: {
  //   //         "Content-Type": "application/json",
  //   //       }
  //   //     });
    
  //   //     if (response.ok) {
  //   //       const result = await response.json();
  //   //       console.log("Info du plugin rattaché: ", result.data);
    
  //   //       // fetchData(result.session_id);
  //   //       fetchData();
  //   //     } else {
  //   //       console.error("Erreur HTTP: ", response.status, response.statusText);
  //   //     }
  //   //   } catch (err) {
  //   //     console.error("Erreur lors de l'attachement du plug :", err);
  //   //   }
  //   // }

  //   // const fetchData = async () => {
  //   //   try {
  //   //     const response = await fetch(`http://localhost:8088/janus/${sessionId}`);
  //   //     if (!response.ok) {
  //   //       throw new Error(`HTTP error! status: ${response.status}`);
  //   //     }
  //   //     if(response.ok)
  //   //       fetchData()
  //   //     const result = await response.json();
  //   //     console.log(result);
  //   //   } catch (err) {
  //   //     console.log("erreur");
  //   //   }
  //   // };

  //   // fetchData();
  //   createSession();
  // }, [])

  const checkEnter = (event) => {
    if(event.key === "Enter") setSessionStarted(true)
  }
  const switchToRoom = () => {
    setSessionStarted(true)
  }  
  const quitRoom = () => {
    setSessionStarted(false)
  }

  return (
    <div>
      { sessionStarted === false ? (
        <div className="pt-[80px] h-screen bg-gradient-to-r from-zinc-50 to-zinc-100 text-white">
          {/* <div id="present" className="mt-96 flex justify-center text-xl text-black">
              bienvenue dans l'application de la reunion du Suas <br />
              <button className="text-sm text-white bg-green-600 p-2 rounded-md ml-2" id="start">commencer</button>
          </div> */}
          <div id="land" className="">
              <div className="text-center text-4xl pb-6 ">
                  <h1 className="text-gray-900">Suas conference</h1>
              </div>
              <div className="container" id="join">
                <div className="flex justify-center">
                    <div className=" top-10 bg-white p-9 rounded drop-shadow-xl w-[400px]">
                        {/* <!-- <form> --> */}
                            <center><span id="you"></span></center>
                            <div className="mb-1">
                                <label className="mb-2.5 block font-medium text-black text-sm dark:text-white mt-2">
                                    <center>Entrez votre nom</center>
                                </label>
                                <div className="relative">
                                    <input
                                        type="text"
                                        placeholder="Entrez votre nom"
                                        className="block w-full rounded-md border-0 py-1.5 pl-2 pr-2 text-gray-900 ring-1 ring-gray-300 placeholder:text-gray-400 focus:outline-blue-500 sm:text-sm sm:leading-6 mb-2"
                                        id="username"
                                        onKeyPress={(event) => checkEnter(event)}
                                        onChange={(e) => {setUsername(e.target.value)}}
                                        value={username}
                                    />
                                </div>
                            </div>
                            <center><button className="text-sm bg-blue-600 p-2 rounded-md" autoComplete="off" id="register" onClick={switchToRoom}>Valider</button></center> 
                        {/* <!-- </form> --> */}
                    </div>
                </div>    
              </div>
          </div>
        </div>
      )
      :
      (<div className=" h-screen bg-gradient-to-r from-[#17161b] to-gray-800 text-white">
        <Header endRoom={quitRoom}/>
        {/* <button className='bg-customGray rounded pl-2 pr-2 ml-2 mt-1.5 hover:bg-blue-600 cursor-pointer h-8 text-xl' onClick={createSession}>start</button> */}
        <TestJanus />
        {/* <div className="flex justify-center mt-2">
          <div className="pl-2 mt-1 block md:hidden sm:hidden">
            <div className="text-sm font-bold">Counseling : Beauty Product</div>
            <div className="text-gray-500 text-xs">Customer : Victor Chris <span className="text-focusedBlue text-xs font-bold hover:text-white cursor-pointer">More details {'>'}</span></div>
          </div>
        </div> */}
        <div className='relative flex flex-col md:flex-row p-2 md:h-[82%] ml-1 mt-[30px] sm:mt-[0px]'>
          <div className="basis-full md:basis-9/12 grid md:grid-cols-6 grid-cols-6 grid-rows-2 md:grid-rows-8 gap-1">
            <div className="text-white text-sm rounded-lg col-span-6 sm:col-span-5 md:col-span-5 row-span-8">
              <Video name = {username}/>
            </div>
            {/* <div className="bg-gray-700 text-white flex items-center justify-center text-lg rounded-lg row-span-2 cursor-pointer hover:bg-gray-600 p-1">
              <OtherUsers />
            </div> */}
            {/* <div className="bg-gray-700 text-white text-sm rounded-lg row-span-2">
              <img src={image} alt='ile de test' className='object-cover rounded-lg h-[125px]'/>
            </div>
            <div className="bg-gray-700 text-white text-sm rounded-lg row-span-2">
              <img src={image} alt='ile de test' className='object-cover rounded-lg h-[125px]'/>
            </div>
            <div className="bg-gray-700 text-white text-sm rounded-lg row-span-2">
              <img src={image} alt='ile de test' className='object-cover rounded-lg h-[125px]'/>
            </div> */}
            <div className="bg-gray-700 text-white text-xs sm:text-sm rounded-lg row-span-2 col-span-2 sm:col-span-1">
              <OtherUsers />
            </div>
            <div className="bg-gray-700 text-white text-xs sm:text-sm rounded-lg row-span-2 col-span-2 sm:col-span-1">
              <OtherUsers />
            </div>
            <div className="bg-gray-700 text-white text-xs sm:text-sm rounded-lg row-span-2 hidden sm:col-span-1 md:block col-span-2">
              <OtherUsers />
            </div>
            
            {/* <div className="bg-gray-700 text-white flex items-center justify-center text-center text-sm rounded-lg row-span-2">4</div> */}
  
            <div className="bg-gray-700 text-white flex items-center justify-center text-center text-lg rounded-lg col-span-2 sm:col-span-1 row-span-2 cursor-pointer hover:bg-gray-600 p-1">
              <div className="mt-3 flex -space-x-2 overflow-hidden p-1">
                <div className='bg-gray-500 w-6 h-6 sm:w-8 sm:h-8 rounded-full ring-2 ring-white'> 
                  {/* <UserOutlined /> */}
                  <img src={avatar1} alt="null" className="sm:w-8 sm:h-8 w-6 h-6 rounded-full" />
                </div>
                <div className='bg-gray-500 w-6 h-6 sm:w-8 sm:h-8 rounded-full ring-2 ring-white'> 
                  {/* <UserOutlined /> */}
                  <img src={avatar2} alt="null" className="sm:w-8 sm:h-8 w-6 h-6 rounded-full" />
                </div>
                <div className='bg-gray-500 w-6 h-6 sm:w-8 sm:h-8 rounded-full ring-2 ring-white'> 
                  {/* <UserOutlined /> */}
                  <img src={avatar1} alt="null" className="sm:w-8 sm:h-8 w-6 h-6 rounded-full" />
                </div>
                <div className='bg-transparent w-6 h-6 sm:w-8 sm:h-8 rounded-full flex items-center justify-center pl-2'> 
                  <DoubleRightOutlined />
                </div>
              </div>
            </div>
          </div>
          <aside className='sm:block md:basis-3/12 md:grid md:grid-cols-1 mr-1 ml-1 bg-gray-100 rounded-lg'>
            <div className={`${openChatOnSmallSceens === false ? 'hidden' : ''} flex justify-center sm:block`}>
              <div className='top-0 absolute  sm:relative'>
                <span className='absolute mt-0.5 right-0.5 top-0 text-white bg-gray-400 rounded-full hover:cursor-pointer hover:bg-red-500 sm:hidden block' onClick={handleDestroy}><XMarkIcon className="h-5 w-5 text-gray-200" /></span>
                {openChat ? <ChatRoom /> : <ParticipantList />}
              </div>
            </div>
          </aside>
        </div>
        <div className='mt-32 sm:mt-0'>
          <Footer openChatPart={handleOpenChat} stateOpenChat={openChat} openParticipants={handleOpenPartList} stateOpenParticipants={openPartList} />
        </div>
      </div>)}
    </div>
  );
};

export default Conference;
